worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}

http {

    log_format log_req_resp '$remote_addr - $remote_user [$time_local] '
        '"$request" $status $body_bytes_sent '
        '"$http_referer" "$http_user_agent" '
        '$request_time req_header:"$req_header" req_body:"$request_body" '
        'resp_header:"$resp_header" resp_body:"$resp_body"';
    server {
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
        server_name smarthome.keepin.com.br;
        ssl_certificate /usr/local/openresty/nginx/certs/smarthome.keepin.com.br.crt;
        ssl_certificate_key /usr/local/openresty/nginx/certs/smarthome.keepin.com.br.key;
        access_log logs/access.log log_req_resp;

        lua_need_request_body on;

        set $resp_body "";
        body_filter_by_lua '
            local resp_body = string.sub(ngx.arg[1], 1, 1000)
            ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
            if ngx.arg[2] then
                ngx.var.resp_body = ngx.ctx.buffered
            end
        ';
        set $req_header "";
        set $resp_header "";
        header_filter_by_lua '
            local h = ngx.req.get_headers()
            for k, v in pairs(h) do
                ngx.var.req_header = ngx.var.req_header .. k.."="..v.." "
            end
            local rh = ngx.resp.get_headers()
            for k, v in pairs(rh) do
                ngx.var.resp_header = ngx.var.resp_header .. k.."="..v.." "
            end
        ';

        ## rotas api oauth sem pacote ##
        location /authorization{
                proxy_pass http://localhost:3000/authorization;
        }
        location /authorize{
                proxy_pass http://localhost:3000/authorize;
        }
        location /token{
                proxy_pass http://localhost:3000/token;
        }
        location /fulfill {
                proxy_pass http://localhost:3000/fulfill;
        }
        location /success {
                proxy_pass http://localhost:3000/success;
        }
        location /authorizePage {
                proxy_pass http://localhost:3000/authorizePage;
        }
        location /loginPage {
                proxy_pass http://localhost:3000/loginPage;
        }
        location /privacy {
                proxy_pass http://localhost:3000/privacy;
        }
        location /setLedOn {
                proxy_pass http://localhost:3000/setLedOn;
        }
        location /setLedOff {
                proxy_pass http://localhost:3000/setLedOff;
        }
        ## rotas api oauth com pacote ##
        location /oauth/authenticate{
                proxy_pass http://localhost:3000/oauth/authenticate;
        }
        location /oauth/access_token {
                proxy_pass http://localhost:3000/oauth/access_token;
        }
        location /register {
                proxy_pass http://localhost:3000/register;
        }
        location /account {
                proxy_pass http://localhost:3000/account;
        }
        location /secured/profile {
                proxy_pass http://localhost:3000/secured/profile;
        }
        location / {
                proxy_pass http://localhost:3000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }
    }
}